import org.arquillian.spacelift.Spacelift
import org.arquillian.spacelift.gradle.GradleSpaceliftDelegate
import org.arquillian.spacelift.gradle.maven.MavenExecutor
import org.arquillian.spacelift.gradle.utils.EnvironmentUtils
import org.arquillian.spacelift.process.CommandBuilder
import org.arquillian.spacelift.task.os.CommandTool

defaultTasks 'test'
apply plugin: 'org.arquillian.spacelift'

ext {
    arquillianCoreVersion = ['1.1.6.Final', '1.1.7.Final', '1.1.8.Final', '1.1.9.Final', '1.1.10.Final', '1.1.11.Final',
                             '1.1.12.Final']

    if (project.hasProperty("browser")) {
        browser = ["${browser}"]
    } else {
        browser = ['phantomjs']
    }

    arquillianPhantomDriverCommit = '1.2.1.1'
    arquillianPhantomDriverOrganization = 'qa'

    // selenium server instance holder
    seleniumVersion = '3.3.1'
    phantomjsVersion = '2.1.1'
}

spacelift {
    tools {
       java {
            command ([
                linux: "java", 
                windows: "java.exe", 
                mac: "java",
                solaris: "java"
            ])
       }
       mvn {
            command {
                def m2 = System.getenv("M2")
                def m2_home = System.getenv("M2_HOME")

                def mvnExpFile = 'mvn'
                if(EnvironmentUtils.runsOnWindows()) {
                    mvnExpFile += '.bat'
                }

                def mvnPath = null
                if (m2 != null && !m2.isEmpty() && (new File(m2, mvnExpFile)).exists()) {
                    mvnPath = new File(new File(m2), mvnExpFile).getCanonicalPath()
                } else if (m2_home != null && !m2_home.isEmpty() && (new File(m2_home, mvnExpFile)).exists()) {
                    mvnPath = new File(new File(m2_home), mvnExpFile).getCanonicalPath()
                } else {
                    mvnPath = mvnExpFile
                }
                return new CommandBuilder(mvnPath)
            }
        }
    }
    profiles {
        "default" {
            enabledInstallations 'phantomjs'
            tests '*'            
        }
    }
    installations {
        phantomjs {
            product 'phantomjs'
            version project.phantomjsVersion
            remoteUrl ([
                linux: "https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-${version}-linux-x86_64.tar.bz2",
                mac: "https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-${version}-macosx.zip",
                windows: "https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-${version}-windows.zip",
            ])
            home "phantomjs-${version}"
            extractMapper { toDir(home).cutdirs() }
            postActions {
                // fix executable flags
                project.ant.chmod(dir: "${home}", perm:"a+x", includes:"**/*phantomjs*")
            }
        }
        // this installation can be used if there is a need to test against not yet release version of arquillian-phantom-driver
        arquillianPhantomDriver {
            product 'arquillianPhantomDriver'
            version { project.arquillianPhantomDriverCommit }
            remoteUrl { "https://github.com/${project.arquillianPhantomDriverOrganization}/arquillian-phantom-driver/archive/${version}.zip" }
            home { "arquillian-phantom-driver-${version}" }
            extractMapper { toDir(home).cutdirs() }
            postActions {
                Tasks.prepare(MavenExecutor).pom("${home.absolutePath}/pom.xml")
                    .goals('clean', 'install')
                    .execute().await()
            }
        }
    }
    tests {
        arquillianCoreCompatibility {

            def seleniumServer = null
            def phantomjsPath = "${phantomjs.home}/bin/phantomjs"
            if(EnvironmentUtils.runsOnWindows()) {
                phantomjsPath += '.exe'
            }

            dataProvider {
                def browser = project.browser
                project.arquillianCoreVersion.collectMany{arqVersion ->
                    browser.collect{ b->
                        [arqVersion, b]
                    }
                }
            }
            execute { arqVersion, browserType ->
                // execute all tests in the extension

                Spacelift.task(MavenExecutor).pom("pom.xml")
                    // replace property version.arquillian.core with compatibility version
                    .property("phantomjs.binary.path=${phantomjsPath}")
                    .property("browser=${browserType}")
                    .goals('clean', 'verify').execute().await()
            }
        }
    }
}

// build dependencies
buildscript {
    repositories {
        mavenCentral()
        // you need this only if you plan to use SNAPSHOT version of this plugin
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'gradle.plugin.org.arquillian.spacelift.gradle:arquillian-spacelift-gradle:1.0.0-alpha-17'
    }
}

// these elements are needed only if you are willing to use _testreport_ task
repositories {
    mavenCentral()
}

configurations {
    junitreport
}

dependencies {
    junitreport 'org.apache.ant:ant-junit:1.9.7'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}
